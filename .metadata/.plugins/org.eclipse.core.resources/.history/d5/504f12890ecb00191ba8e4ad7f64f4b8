package com.rmh;

public class BinarySearchTree<E> {

	private int size;
	private Node<E> root;
	
	public int size() {
		return 0;
	}
	
	public boolean isEmpty() {
		return false;
	}
	
	public void clear() {
		
	}
	
	public void add(E element) {
		elementNotNullCheck(element);
		
		if (root == null) {// 第一个节点
			root = new Node<>(element, null);
			size++;
			return;
		}
		// 找到父节点
		Node<E> node = root;
		Node<E> parent = null;
		while (node != null) {
			
			int cmp = compare(element, node.element);
			parent = node;
			if (cmp > 0) {
				node = node.right;
			}else if (cmp < 0) {
				node = node.left;
			}else {
				return;
			}
		}
		
		
	}
	
	public void remove(E element) {
		
	}
	
	public boolean contains(E element) {
		return false;
	}
	
	/**
	 * 返回值等于0 e1=e2 返回值大于0 e1>e2 负1 e1<e2
	 * @param e1
	 * @param e2
	 */
	private int compare(E e1,E e2) {
		return 0;
	}
	
	private void elementNotNullCheck(E element) {
		if (element == null) {
			throw new IllegalArgumentException("element must not be null");
		}
	}
	
	private static class Node<E> {
		E element;
		Node<E> left;
		Node<E> right;
		Node<E> parent;
		public Node (E element,Node<E> parent) {
			this.element = element;
			this.parent = parent;
		}
	}
}
